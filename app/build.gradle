plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.cgs.webview'
    compileSdk 34

    defaultConfig {
        applicationId project.hasProperty('appID') ? project.property('appID') : "com.cgs.webview"
        minSdk 24
        targetSdk 34
        versionCode project.hasProperty('versionCode') ? project.property('versionCode').toInteger() : 1
        versionName project.hasProperty('versionName') ? project.property('versionName') : "1.0"
        buildConfigField "String", "WEBVIEW_URL", "\"${project.hasProperty('webViewUrl') ? project.property('webViewUrl') : 'https://google.com'}\""


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        config {
            keyAlias project.hasProperty('keyAlias') ? project.property('keyAlias') : ""
            keyPassword project.hasProperty('keyPass') ? project.property('keyPass') : ""
            storeFile file('keystore/key_file.keystore')
            storePassword project.hasProperty('keyPass') ? project.property('keyPass') : ""
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (project.hasProperty('keyAlias')) {
                signingConfig signingConfigs.config
            }
        }
    }
    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    tasks.register("modifyColorsXml") {
        doLast {
            def colorsXmlFile = file("${project.projectDir}/src/main/res/values/colors.xml")

            if (colorsXmlFile.exists() && project.hasProperty('splashBg')) {
                def splashBgColor = project.property('splashBg')

                // Validate the color code using a regular expression
                if (!splashBgColor.matches("^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{8})")) {
                    println("Invalid color code format for 'splashBg'. It should be in the format #RRGGBB or #AARRGGBB. Skipping modification.")
                } else {
                    def content = colorsXmlFile.getText()
                    content = content.replaceAll('<color name="splash_bg">.*?</color>', '<color name="splash_bg">' + splashBgColor + '</color>')
                    colorsXmlFile.write(content)
                }
            } else {
                println("colors.xml not found or 'splashBg' property not provided. Skipping modification.")
            }
        }
    }

    preBuild.dependsOn("modifyColorsXml")

    tasks.register("modifyStringsXml") {
        doLast {
            def stringsXmlFile = file("${project.projectDir}/src/main/res/values/strings.xml")

            if (stringsXmlFile.exists() && project.hasProperty('appName')) {
                def appName = project.property('appName')

                def content = stringsXmlFile.getText()
                content = content.replaceAll('<string name="app_name">.*?</string>', '<string name="app_name">' + appName + '</string>')
                stringsXmlFile.write(content)
            } else {
                throw new GradleException("strings.xml not found or 'appName' property not provided!")
            }
        }
    }

    preBuild.dependsOn("modifyStringsXml")

}

dependencies {
    implementation 'com.intuit.sdp:sdp-android:1.1.0'
    implementation 'androidx.webkit:webkit:1.9.0'

    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}